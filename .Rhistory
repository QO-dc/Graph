suppressPackageStartupMessages(library(tidyverse))
data <- import("Libro1.xlsx")
# Convertir columnas de votaciones en listas de países
votos_a_favor <- strsplit(as.character(data$"Votos a Favor"), ",")
votos_en_contra <- strsplit(as.character(data$"Votos en contra"), ",")
abstenciones <- strsplit(as.character(data$Abstenciones), ",")
# Crear una lista vacía para almacenar los edges del grafo
edges <- list()
for (i in 1:length(votos_a_favor)) {
if (length(votos_a_favor[[i]]) > 1) {  # Verificar que haya al menos 2 países
edges <- append(edges, combn(votos_a_favor[[i]], 2, simplify = FALSE))
}
# Crear aristas entre países que se abstuvieron
for (i in 1:length(abstenciones)) {
if (length(abstenciones[[i]]) > 1) {  # Verificar que haya al menos 2 países
edges <- append(edges, combn(abstenciones[[i]], 2, simplify = FALSE))
}
}
# Crear un grafo a partir de los edges
g <- graph_from_edgelist(do.call(rbind, edges), directed = FALSE)
suppressPackageStartupMessages(library(rio))
suppressPackageStartupMessages(library(sf))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(igraph))
suppressPackageStartupMessages(library(tidyverse))
data <- import("Libro1.xlsx")
# Convertir columnas de votaciones en listas de países
votos_a_favor <- strsplit(as.character(data$"Votos a Favor"), ",")
abstenciones <- strsplit(as.character(data$Abstenciones), ",")
# Crear una lista vacía para almacenar los edges del grafo
edges <- list()
for (i in 1:length(votos_a_favor)) {
if (length(votos_a_favor[[i]]) > 1) {  # Verificar que haya al menos 2 países
edges <- append(edges, combn(votos_a_favor[[i]], 2, simplify = FALSE))
}
}
# Crear aristas entre países que se abstuvieron
for (i in 1:length(abstenciones)) {
if (length(abstenciones[[i]]) > 1) {  # Verificar que haya al menos 2 países
edges <- append(edges, combn(abstenciones[[i]], 2, simplify = FALSE))
}
}
# Crear un grafo a partir de los edges
g <- graph_from_edgelist(do.call(rbind, edges), directed = FALSE)
is.connected(g)
components(g)$no
mean_distance(g, directed = FALSE)
density <- edge_density(g)
print(density)
# Centralidad de grado (número de conexiones de cada nodo)
degree_centrality <- degree(g)
# Centralidad de cercanía (qué tan cerca está un nodo de todos los demás)
closeness_centrality <- closeness(g)
# Centralidad de intermediación (cuántas veces pasa la ruta más corta por un nodo)
betweenness_centrality <- betweenness(g)
# Mostrar los resultados
degree_centrality
closeness_centrality
betweenness_centrality
plot(g, vertex.size = 5, vertex.label.cex = 0.8, main = "Red de Votaciones ONU")
# Crear las aristas basadas en votaciones similares
edges <- relaciones %>%
group_by(Resultado) %>%
summarize(pais_origen = first(paises), pais_destino = last(paises)) %>%
ungroup()
suppressPackageStartupMessages(library(rio))
suppressPackageStartupMessages(library(sf))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(igraph))
suppressPackageStartupMessages(library(tidyverse))
data <- import("Libro1.xlsx")
# Convertir columnas de votaciones en listas de países
abstenciones <- strsplit(as.character(data$Abstenciones), ",")
# Crear una lista vacía para almacenar los edges del grafo
edges <- list()
# Crear aristas entre países que se abstuvieron
for (i in 1:length(abstenciones)) {
if (length(abstenciones[[i]]) > 1) {  # Verificar que haya al menos 2 países
edges <- append(edges, combn(abstenciones[[i]], 2, simplify = FALSE))
}
}
# Crear un grafo a partir de los edges
g <- graph_from_edgelist(do.call(rbind, edges), directed = FALSE)
is.connected(g)
components(g)$no
mean_distance(g, directed = FALSE)
density <- edge_density(g)
print(density)
# Centralidad de grado (número de conexiones de cada nodo)
degree_centrality <- degree(g)
# Centralidad de cercanía (qué tan cerca está un nodo de todos los demás)
closeness_centrality <- closeness(g)
# Centralidad de intermediación (cuántas veces pasa la ruta más corta por un nodo)
betweenness_centrality <- betweenness(g)
# Mostrar los resultados
degree_centrality
closeness_centrality
betweenness_centrality
plot(g, vertex.size = 5, vertex.label.cex = 0.8, main = "Red de Votaciones ONU")
# Crear las aristas basadas en votaciones similares
edges <- relaciones %>%
group_by(Resultado) %>%
summarize(pais_origen = first(paises), pais_destino = last(paises)) %>%
ungroup()
# Centralidad de grado (número de conexiones de cada nodo)
degree_centrality <- degree(g)
# Centralidad de cercanía (qué tan cerca está un nodo de todos los demás)
closeness_centrality <- closeness(g)
# Centralidad de intermediación (cuántas veces pasa la ruta más corta por un nodo)
betweenness_centrality <- betweenness(g)
# Mostrar los resultados
degree_centrality
closeness_centrality
betweenness_centrality
suppressPackageStartupMessages(library(rio))
suppressPackageStartupMessages(library(sf))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(igraph))
suppressPackageStartupMessages(library(tidyverse))
data <- import("Libro1.xlsx")
# Convertir columnas de votaciones en listas de países
votos_a_favor <- strsplit(as.character(data$"Votos a Favor"), ",")
votos_en_contra <- strsplit(as.character(data$"Votos en contra"), ",")
abstenciones <- strsplit(as.character(data$Abstenciones), ",")
# Crear una lista vacía para almacenar los edges del grafo
edges <- list()
# Crear aristas entre países que se abstuvieron
for (i in 1:length(abstenciones)) {
if (length(abstenciones[[i]]) > 1) {  # Verificar que haya al menos 2 países
edges <- append(edges, combn(abstenciones[[i]], 2, simplify = FALSE))
}
}
# Crear un grafo a partir de los edges
g <- graph_from_edgelist(do.call(rbind, edges), directed = FALSE)
votos_a_favor <- strsplit(as.character(data$"Votos a Favor"), ",")
# Crear aristas entre países que votaron a favor
edges_1 <- list()
for (i in 1:length(votos_a_favor)) {
if (length(votos_a_favor[[i]]) > 1) {  # Verificar que haya al menos 2 países
edges_1 <- append(edges, combn(votos_a_favor[[i]], 2, simplify = FALSE))
}
}
# Crear aristas entre países que votaron en contra
for (i in 1:length(votos_en_contra)) {
if (length(votos_en_contra[[i]]) > 1) {  # Verificar que haya al menos 2 países
edges_1 <- append(edges, combn(votos_en_contra[[i]], 2, simplify = FALSE))
}
}
votos_a_favor <- strsplit(as.character(data$"Votos a Favor"), ",")
# Crear aristas entre países que votaron a favor
edges_1 <- list()
for (i in 1:length(votos_a_favor)) {
if (length(votos_a_favor[[i]]) > 1) {  # Verificar que haya al menos 2 países
edges_1 <- append(edges, combn(votos_a_favor[[i]], 2, simplify = FALSE))
}
}
# Crear aristas entre países que votaron en contra
for (i in 1:length(votos_en_contra)) {
if (length(votos_en_contra[[i]]) > 1) {  # Verificar que haya al menos 2 países
edges_1 <- append(edges, combn(votos_en_contra[[i]], 2, simplify = FALSE))
}
}
g_1 <- graph_from_edgelist(do.call(rbind, edges_1), directed = FALSE)
plot(g_1, vertex.size = 5, vertex.label.cex = 0.8, main = "Red de Votaciones ONU")
votos_a_favor <- strsplit(as.character(data$"Votos a Favor"), ",")
suppressPackageStartupMessages(library(rio))
suppressPackageStartupMessages(library(sf))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(igraph))
suppressPackageStartupMessages(library(tidyverse))
data <- import("Libro1.xlsx")
# Convertir columnas de votaciones en listas de países
votos_a_favor <- strsplit(as.character(data$"Votos a Favor"), ",")
votos_en_contra <- strsplit(as.character(data$"Votos en contra"), ",")
abstenciones <- strsplit(as.character(data$Abstenciones), ",")
# Crear una lista vacía para almacenar los edges del grafo
edges <- list()
# Crear aristas entre países que se abstuvieron
for (i in 1:length(abstenciones)) {
if (length(abstenciones[[i]]) > 1) {  # Verificar que haya al menos 2 países
edges <- append(edges, combn(abstenciones[[i]], 2, simplify = FALSE))
}
}
# Crear un grafo a partir de los edges
g <- graph_from_edgelist(do.call(rbind, edges), directed = FALSE)
votos_a_favor <- strsplit(as.character(data$"Votos a Favor"), ",")
# Crear aristas entre países que votaron a favor
edges_1 <- list()
for (i in 1:length(votos_a_favor)) {
if (length(votos_a_favor[[i]]) > 1) {  # Verificar que haya al menos 2 países
edges_1 <- append(edges, combn(votos_a_favor[[i]], 2, simplify = FALSE))
}
}
g_1 <- graph_from_edgelist(do.call(rbind, edges_1), directed = FALSE)
plot(g_1, vertex.size = 5, vertex.label.cex = 0.8, main = "Red de Votaciones ONU")
votos_a_favor <- strsplit(as.character(data$"Votos a Favor"), ",")
# Crear aristas entre países que votaron a favor
edges_1 <- list()
for (i in 1:length(votos_a_favor)) {
if (length(votos_a_favor[[i]]) > 1) {  # Verificar que haya al menos 2 países
edges_1 <- append(edges_1, combn(votos_a_favor[[i]], 2, simplify = FALSE))
}
}
g_1 <- graph_from_edgelist(do.call(rbind, edges_1), directed = FALSE)
plot(g_1, vertex.size = 5, vertex.label.cex = 0.8, main = "Red de Votaciones ONU")
plot(g, vertex.size = 5, vertex.label.cex = 0.8, main = "Red de Votaciones ONU")
plot(g, vertex.size = 5, vertex.label.cex = 0.8, main = "Red de Votaciones ONU en Contra")
plot(g, vertex.size = 5, vertex.label.cex = 0.8, main = "Red de Votaciones ONU que se absitenen a la votación")
suppressPackageStartupMessages(library(rio))
suppressPackageStartupMessages(library(sf))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(igraph))
suppressPackageStartupMessages(library(tidyverse))
data <- import("Libro1.xlsx")
# Convertir columnas de votaciones en listas de países
votos_a_favor <- strsplit(as.character(data$"Votos a Favor"), ",")
votos_en_contra <- strsplit(as.character(data$"Votos en contra"), ",")
abstenciones <- strsplit(as.character(data$Abstenciones), ",")
# Crear una lista vacía para almacenar los edges del grafo
edges <- list()
# Crear un grafo a partir de los edges
g <- graph_from_edgelist(do.call(rbind, edges), directed = FALSE)
# Convertir columnas de votaciones en listas de países
votos_a_favor <- strsplit(as.character(data$"Votos a Favor"), ",")
votos_en_contra <- strsplit(as.character(data$"Votos en contra"), ",")
abstenciones <- strsplit(as.character(data$Abstenciones), ",")
# Crear una lista vacía para almacenar los edges del grafo
edges <- list()
# Crear aristas entre países que se abstuvieron
for (i in 1:length(abstenciones)) {
if (length(abstenciones[[i]]) > 1) {  # Verificar que haya al menos 2 países
edges <- append(edges, combn(abstenciones[[i]], 2, simplify = FALSE))
}
}
# Crear un grafo a partir de los edges
g <- graph_from_edgelist(do.call(rbind, edges), directed = FALSE)
votos_a_favor <- strsplit(as.character(data$"Votos a Favor"), ",")
# Crear aristas entre países que votaron a favor
edges_1 <- list()
for (i in 1:length(votos_a_favor)) {
if (length(votos_a_favor[[i]]) > 1) {  # Verificar que haya al menos 2 países
edges_1 <- append(edges_1, combn(votos_a_favor[[i]], 2, simplify = FALSE))
}
}
g_1 <- graph_from_edgelist(do.call(rbind, edges_1), directed = FALSE)
plot(g_1, vertex.size = 5, vertex.label.cex = 0.8, main = "Red de Votaciones ONU")
plot(g_1, vertex.size = 5, vertex.label.cex = 0.8, main = "Red de Votaciones ONU")
plot(g_1, vertex.size = 5, vertex.label.cex = 0.8, main = "Red de Votaciones ONU")
plot(g_1, vertex.size = 5, vertex.label.cex = 0.8, main = "Red de Votaciones ONU")
plot(g_1, vertex.size = 5, vertex.label.cex = 0.8, main = "Red de Votaciones ONU")
is.connected(g)
components(g)$no
mean_distance(g, directed = FALSE)
density <- edge_density(g)
print(density)
# Centralidad de grado (número de conexiones de cada nodo)
degree_centrality <- degree(g)
# Centralidad de cercanía (qué tan cerca está un nodo de todos los demás)
closeness_centrality <- closeness(g)
# Centralidad de intermediación (cuántas veces pasa la ruta más corta por un nodo)
betweenness_centrality <- betweenness(g)
# Mostrar los resultados
degree_centrality
closeness_centrality
betweenness_centrality
plot(g, vertex.size = 5, vertex.label.cex = 0.8, main = "Red de Votaciones ONU que se absitenen a la votación")
plot(g, vertex.size = 5, vertex.label.cex = 0.8, main = "Red de Votaciones ONU que se absitenen a la votación")
plot(g, vertex.size = 5, vertex.label.cex = 0.8, main = "Red de Votaciones ONU que se absitenen a la votación")
plot(g, vertex.size = 5, vertex.label.cex = 0.8, main = "Red de Votaciones ONU que se absitenen a la votación")
plot(g, vertex.size = 5, vertex.label.cex = 0.8, main = "Red de Votaciones ONU que se absitenen a la votación")
# Crear las aristas basadas en votaciones similares
edges <- relaciones %>%
group_by(Resultado) %>%
summarize(pais_origen = first(paises), pais_destino = last(paises)) %>%
ungroup()
data <- import("Libro1.xlsx")
# Convertir columnas de votaciones en listas de países
votos_a_favor <- strsplit(as.character(data$"Votos a Favor"), ",")
votos_en_contra <- strsplit(as.character(data$"Votos en contra"), ",")
abstenciones <- strsplit(as.character(data$Abstenciones), ",")
# Crear una lista vacía para almacenar los edges del grafo
edges <- list()
# Crear aristas entre países que se abstuvieron
for (i in 1:length(abstenciones)) {
if (length(abstenciones[[i]]) > 1) {  # Verificar que haya al menos 2 países
edges <- append(edges, combn(abstenciones[[i]], 2, simplify = FALSE))
}
}
# Crear un grafo a partir de los edges
g <- graph_from_edgelist(do.call(rbind, edges), directed = FALSE)
is.connected(g_1)
components(g_1)$no
mean_distance(g_1, directed = FALSE)
density <- edge_density(g_1)
print(density)
# Centralidad de grado (número de conexiones de cada nodo)
degree_centrality <- degree(g_1)
# Centralidad de cercanía (qué tan cerca está un nodo de todos los demás)
closeness_centrality <- closeness(g_1)
# Centralidad de intermediación (cuántas veces pasa la ruta más corta por un nodo)
betweenness_centrality <- betweenness(g_1)
# Mostrar los resultados
degree_centrality
closeness_centrality
betweenness_centrality
is.connected(g)
components(g)$no
mean_distance(g, directed = FALSE)
density <- edge_density(g)
print(density)
# Centralidad de grado (número de conexiones de cada nodo)
degree_centrality <- degree(g)
# Centralidad de cercanía (qué tan cerca está un nodo de todos los demás)
closeness_centrality <- closeness(g)
# Centralidad de intermediación (cuántas veces pasa la ruta más corta por un nodo)
betweenness_centrality <- betweenness(g)
# Mostrar los resultados
degree_centrality
closeness_centrality
betweenness_centrality
suppressPackageStartupMessages(library(rio))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(igraph))
suppressPackageStartupMessages(library(tidyverse))
data <- import("Libro1.xlsx")
# Convertir columnas de votaciones en listas de países
votos_a_favor <- strsplit(as.character(data$"Votos a Favor"), ",")
votos_en_contra <- strsplit(as.character(data$"Votos en contra"), ",")
abstenciones <- strsplit(as.character(data$Abstenciones), ",")
# Crear una lista vacía para almacenar los edges del grafo
edges <- list()
# Crear aristas entre países que se abstuvieron
for (i in 1:length(abstenciones)) {
if (length(abstenciones[[i]]) > 1) {  # Verificar que haya al menos 2 países
edges <- append(edges, combn(abstenciones[[i]], 2, simplify = FALSE))
}
}
# Crear un grafo a partir de los edges
g <- graph_from_edgelist(do.call(rbind, edges), directed = FALSE)
votos_a_favor <- strsplit(as.character(data$"Votos a Favor"), ",")
# Crear aristas entre países que votaron a favor
edges_1 <- list()
for (i in 1:length(votos_a_favor)) {
if (length(votos_a_favor[[i]]) > 1) {  # Verificar que haya al menos 2 países
edges_1 <- append(edges_1, combn(votos_a_favor[[i]], 2, simplify = FALSE))
}
}
g_1 <- graph_from_edgelist(do.call(rbind, edges_1), directed = FALSE)
plot(g_1, vertex.size = 5, vertex.label.cex = 0.8, main = "Red de Votaciones ONU")
is.connected(g_1)
components(g_1)$no
is.connected(g_1)
components(g_1)$no
mean_distance(g_1, directed = FALSE)
density <- edge_density(g_1)
print(density)
# Centralidad de grado (número de conexiones de cada nodo)
degree_centrality <- degree(g_1)
# Centralidad de cercanía (qué tan cerca está un nodo de todos los demás)
closeness_centrality <- closeness(g_1)
# Centralidad de intermediación (cuántas veces pasa la ruta más corta por un nodo)
betweenness_centrality <- betweenness(g_1)
# Mostrar los resultados
degree_centrality
closeness_centrality
betweenness_centrality
# Centralidad de grado (número de conexiones de cada nodo)
degree_centrality <- degree(g)
# Centralidad de cercanía (qué tan cerca está un nodo de todos los demás)
closeness_centrality <- closeness(g)
# Centralidad de intermediación (cuántas veces pasa la ruta más corta por un nodo)
betweenness_centrality <- betweenness(g)
# Mostrar los resultados
degree_centrality
closeness_centrality
betweenness_centrality
suppressPackageStartupMessages(library(rio))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(igraph))
suppressPackageStartupMessages(library(tidyverse))
library(knitr)
kable(centrality_table)
centrality_table <- data.frame(
Nodo = V(g)$name,  # Asume que los nodos tienen un atributo 'name'
Grado = degree_centrality,
Cercania = closeness_centrality,
Intermediacion = betweenness_centrality
)
kable(centrality_table)
# Centralidad de grado (número de conexiones de cada nodo)
degree_centrality <- degree(g_1)
# Centralidad de cercanía (qué tan cerca está un nodo de todos los demás)
closeness_centrality <- closeness(g_1)
# Centralidad de intermediación (cuántas veces pasa la ruta más corta por un nodo)
betweenness_centrality <- betweenness(g_1)
centrality_table <- data.frame(
Nodo = V(g_1)$name,  # Asume que los nodos tienen un atributo 'name'
Grado = degree_centrality,
Cercania = closeness_centrality,
Intermediacion = betweenness_centrality
)
kable(centrality_table)
# Centralidad de grado (número de conexiones de cada nodo)
degree_centrality <- degree(g)
# Centralidad de cercanía (qué tan cerca está un nodo de todos los demás)
closeness_centrality <- closeness(g)
# Centralidad de intermediación (cuántas veces pasa la ruta más corta por un nodo)
betweenness_centrality <- betweenness(g)
# Centralidad de grado (número de conexiones de cada nodo)
degree_centrality <- degree(g)
# Centralidad de cercanía (qué tan cerca está un nodo de todos los demás)
closeness_centrality <- closeness(g)
# Centralidad de intermediación (cuántas veces pasa la ruta más corta por un nodo)
betweenness_centrality <- betweenness(g)
centrality_table <- data.frame(
Nodo = V(g)$name,  # Asume que los nodos tienen un atributo 'name'
Grado = degree_centrality,
Cercania = closeness_centrality,
Intermediacion = betweenness_centrality
)
kable(centrality_table)
suppressPackageStartupMessages(library(rio))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(igraph))
suppressPackageStartupMessages(library(tidyverse))
library(knitr)
data <- import("Libro1.xlsx")
# Convertir columnas de votaciones en listas de países
votos_a_favor <- strsplit(as.character(data$"Votos a Favor"), ",")
votos_en_contra <- strsplit(as.character(data$"Votos en contra"), ",")
abstenciones <- strsplit(as.character(data$Abstenciones), ",")
# Crear una lista vacía para almacenar los edges del grafo
edges <- list()
# Crear aristas entre países que se abstuvieron
for (i in 1:length(abstenciones)) {
if (length(abstenciones[[i]]) > 1) {  # Verificar que haya al menos 2 países
edges <- append(edges, combn(abstenciones[[i]], 2, simplify = FALSE))
}
}
# Crear un grafo a partir de los edges
g <- graph_from_edgelist(do.call(rbind, edges), directed = FALSE)
votos_a_favor <- strsplit(as.character(data$"Votos a Favor"), ",")
# Crear aristas entre países que votaron a favor
edges_1 <- list()
for (i in 1:length(votos_a_favor)) {
if (length(votos_a_favor[[i]]) > 1) {  # Verificar que haya al menos 2 países
edges_1 <- append(edges_1, combn(votos_a_favor[[i]], 2, simplify = FALSE))
}
}
g_1 <- graph_from_edgelist(do.call(rbind, edges_1), directed = FALSE)
plot(g_1, vertex.size = 5, vertex.label.cex = 0.8, main = "Red de Votaciones ONU")
is.connected(g_1)
components(g_1)$no
mean_distance(g_1, directed = FALSE)
density <- edge_density(g_1)
print(density)
# Centralidad de grado (número de conexiones de cada nodo)
degree_centrality <- degree(g_1)
# Centralidad de cercanía (qué tan cerca está un nodo de todos los demás)
closeness_centrality <- closeness(g_1)
# Centralidad de intermediación (cuántas veces pasa la ruta más corta por un nodo)
betweenness_centrality <- betweenness(g_1)
centrality_table <- data.frame(
Nodo = V(g_1)$name,  # Asume que los nodos tienen un atributo 'name'
Grado = degree_centrality,
Cercania = closeness_centrality,
Intermediacion = betweenness_centrality
)
kable(centrality_table)
plot(g, vertex.size = 5, vertex.label.cex = 0.8, main = "Red de Votaciones ONU que se absitenen a la votación")
is.connected(g)
components(g)$no
mean_distance(g, directed = FALSE)
density <- edge_density(g)
print(density)
# Centralidad de grado (número de conexiones de cada nodo)
degree_centrality <- degree(g)
# Centralidad de cercanía (qué tan cerca está un nodo de todos los demás)
closeness_centrality <- closeness(g)
# Centralidad de intermediación (cuántas veces pasa la ruta más corta por un nodo)
betweenness_centrality <- betweenness(g)
# Centralidad de grado (número de conexiones de cada nodo)
degree_centrality <- degree(g)
# Centralidad de cercanía (qué tan cerca está un nodo de todos los demás)
closeness_centrality <- closeness(g)
# Centralidad de intermediación (cuántas veces pasa la ruta más corta por un nodo)
betweenness_centrality <- betweenness(g)
centrality_table <- data.frame(
Nodo = V(g)$name,  # Asume que los nodos tienen un atributo 'name'
Grado = degree_centrality,
Cercania = closeness_centrality,
Intermediacion = betweenness_centrality
)
kable(centrality_table)
# Centralidad de grado (número de conexiones de cada nodo)
degree_centrality <- degree(g_1)
# Centralidad de cercanía (qué tan cerca está un nodo de todos los demás)
closeness_centrality <- closeness(g_1)
# Centralidad de intermediación (cuántas veces pasa la ruta más corta por un nodo)
betweenness_centrality <- betweenness(g_1)
centrality_table <- data.frame(
Nodo = V(g_1)$name,  # Asume que los nodos tienen un atributo 'name'
Grado = degree_centrality,
Cercania = closeness_centrality,
Intermediacion = betweenness_centrality
)
kable(centrality_table)
